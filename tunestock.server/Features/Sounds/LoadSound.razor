@page "/uploadSound"
@inject ISoundService SoundService
@inject UserSession userSession

@using System.ComponentModel.DataAnnotations
@using System.Net.Sockets

@using tunestock.api.dto
@using tunestock.core.entities
@using tunestock.core.http
@using tunestock.server.Services.Label
@using tunestock.server.Services.Sound
@using tunestock.server.Services.User

<NavBar></NavBar>
<br/>

<div class="container">
    <div class="row justify-content-center align-items-center" style="max-height: 100vh;">
        <div class="col-12 col-md-8 col-lg-6">
            <br/>
            <h1 class="text-center">CARGAR SONIDO!</h1>
            <br/>
            <EditForm Model="@soundModel" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="soundName">Nombre del sonido:</label>
                    <InputText id="soundName" @bind-Value="@soundModel.SoundName" class="form-control"/>
                    <ValidationMessage For="@(() => soundModel.SoundName)"/>
                </div>
                <br/>

                <div class="form-group">
                    <label for="file">Archivo:</label>
                    <InputFile OnChange="@FileUploaded" class="form-control" />
                    <ValidationMessage For="@(() => soundModel.File)" />
                </div>
                <br/>

                <div class="form-group">
                    <label for="premium">Es Premium:</label>
                    <InputCheckbox id="premium" @bind-Value="soundModel.IsPremiun"/>
                    <ValidationMessage For="@(() => soundModel.IsPremiun)"/>
                </div>
                <br/>

                <div class="form-group">
                    <label for="precio">Precio:</label>
                    <InputNumber id="precio" @bind-Value="@soundModel.Price" class="form-control"/>
                    <ValidationMessage For="@(() => soundModel.Price)"/>
                </div>
                <br/>

                <div class="form-group">
                    <label for="etiqueta">Etiqueta:</label>
                    <InputSelect id="etiqueta" @bind-Value="selectedLabelId" class="form-control">
                        <option value="">Seleccione una etiqueta</option>
                        @foreach (var label in Labels) {
                            <option value="@label.ID">@label.Labelname</option>
                        }
                    </InputSelect>
                    @if (isLabelValidationError) {
                        <div class="text-danger">Debe seleccionar una etiqueta.</div>
                    }
                </div>
                <br/>

                <div class="text-center">
                    <button type="submit" class="btn btn-primary">ACEPTAR</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    private IBrowserFile selectedFile;
    
    private SoundModel soundModel = new SoundModel();
    private int selectedLabelId;
    private bool isLabelValidationError;

    public List<LabelDto> Labels = new List<LabelDto>();

    [Inject] ISoundService _SoundService { get; set; }
    [Inject] ILabelService _labelService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync() {
        Response<List<LabelDto>> response = await _labelService.GetAllAsync();
        Labels = response.Data;
    }

    private class SoundModel {
        [Required(ErrorMessage = "El sonido debe tener un nombre.")]
        public string SoundName { get; set; }

        [Required(ErrorMessage = "El sonido debe tener un archivo.")]
        public string File { get; set; }

        [Required(ErrorMessage = "SerÃ¡ Free por defecto.")]
        public bool IsPremiun { get; set; }

        [Required(ErrorMessage = "Debe tener un precio si es Premium.")]
        public double Price { get; set; }

        public LabelDto Label { get; set; }
    }

    private async void HandleValidSubmit() {
        soundModel.Label = Labels.FirstOrDefault(l => l.ID == selectedLabelId);
        if (soundModel.Label == null) {
            isLabelValidationError = true;
            return;
        }

        isLabelValidationError = false;
        if (await PerformSound(soundModel)) {
            Console.WriteLine("CARGADO CON EXITO");
            NavigationManager.NavigateTo("/mysounds");
        }
    }

    private async Task<bool> PerformSound(SoundModel soundModel) {
        try {
            SoundDto soundDto = new SoundDto {
                UserID = userSession.CurrentUser.ID,
                SoundName = soundModel.SoundName,
                File = soundModel.File,
                IsPremiun = soundModel.IsPremiun,
                Price = soundModel.Price
            };

            Console.WriteLine("SoundDto: " + soundDto.SoundName);

            Response<SoundDto> response = await _SoundService.SaveAsync(soundDto, soundModel.Label.ID);

            if (response.Data == null) {
                Console.WriteLine("Errores: " + string.Join(", ", response.Errors));
                return false;
            }

            return true;
        }
        catch (HttpRequestException ex) {
            Console.WriteLine("Error de solicitud HTTP: " + ex.Message);
        }
        catch (SocketException ex) {
            Console.WriteLine("Error de socket: " + ex.Message);
        }
        catch (Exception ex) {
            Console.WriteLine("Ha ocurrido un error inesperado: " + ex.Message);
        }

        return false;
    }

    public async Task FileUploaded(InputFileChangeEventArgs e) {
        var browserFile = e.File;

        if (browserFile != null) {
            try {
                var uploadFolder = Path.Combine("wwwroot", "uploads");
                if (!Directory.Exists(uploadFolder)) {
                    Directory.CreateDirectory(uploadFolder);
                }

                var fileName = Guid.NewGuid().ToString() + Path.GetExtension(browserFile.Name);
                var filePath = Path.Combine(uploadFolder, fileName);

                using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    await browserFile.OpenReadStream().CopyToAsync(fileStream);
                }
                
                soundModel.File = "/uploads/" + fileName;
            }
            catch (Exception ex) {
                Console.WriteLine("HA OCURRIDO UN ERROR AL INTENTAR CARGAR EL ARCHIVO MP3: " + ex.Message);
            }
        }
        
    }
    
}