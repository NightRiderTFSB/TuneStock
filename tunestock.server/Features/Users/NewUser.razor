@page "/signup"
@inject IUserService UserService

@using System.ComponentModel.DataAnnotations
@using System.Net.Sockets

@using tunestock.api.dto
@using tunestock.core.http
@using tunestock.server.Services.User

<div class="container">
    <div class="row justify-content-center align-items-center" style="max-height: 100vh;">
        <div class="col-12 col-md-8 col-lg-6">
            <br/>
            <h1 class="text-center">NUEVO USUARIO</h1>
            <br/>
            <EditForm Model="@signupModel" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="form-group">
                    <label for="username">Nombre de usuario:</label>
                    <InputText id="username" @bind-Value="@signupModel.Username" class="form-control"/>
                    <ValidationMessage For="@(() => signupModel.Username)"/>
                </div>

                <div class="form-group">
                    <label for="username">Correo electrónico:</label>
                    <InputText id="username" @bind-Value="@signupModel.Email" class="form-control"/>
                    <ValidationMessage For="@(() => signupModel.Email)"/>
                </div>

                <div class="form-group">
                    <label for="password">Contraseña:</label>
                    <InputText id="password" @bind-Value="@signupModel.Password" type="password" class="form-control"/>
                    <ValidationMessage For="@(() => signupModel.Password)"/>
                </div>
                <br/>

                <div class="text-center">
                    <button type="submit" class="btn btn-primary">ACEPTAR</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    
    //Declaración de una instancia del modelo
    private SignupModel signupModel = new SignupModel();
    
    //Inyección de dependencias
    [Inject] IUserService _service { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }

    //Definición del modelo
    private class SignupModel
    {
        [Required(ErrorMessage = "El nombre de usuario es obligatorio.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Email { get; set; }
        
        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Password { get; set; }
    }

    //Método para manejar la validación del formulario
    private async void HandleValidSubmit()
    {
        if (await PerformUser(signupModel))
        {
            
            NavigationManager.NavigateTo("/home");
        }
    }

    //Intentar crear usuario a través del modelo y el dto correspondiente
    private async Task<bool> PerformUser(SignupModel signupModel)
    {
        try
        {
            UserDto userDto = new UserDto();
            userDto.Username = signupModel.Username;
            userDto.Email = signupModel.Email;
            userDto.Password = signupModel.Password;

            Response<UserDto> response = await _service.SaveAsync(userDto); //Linea 90
        
            Console.WriteLine("RESPONSE: " + response);
        
            if (response.Data == null)
            {
                return false;
            }
        
            return true;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine("Error de solicitud HTTP: " + ex.Message);
            // Manejar el error de solicitud HTTP específicamente
        }
        catch (SocketException ex)
        {
            Console.WriteLine("Error de socket: " + ex.Message);
            // Manejar el error de socket específicamente
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ha ocurrido un error inesperado: " + ex.Message);
            // Manejar cualquier otro error de manera genérica
        }
    
        return false;
    }
}